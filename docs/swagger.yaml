basePath: /
definitions:
  controllers.ArticleInput:
    properties:
      category_ids:
        type: string
      content:
        type: string
      description:
        type: string
      image_url:
        type: string
      tag_ids:
        type: string
      tags:
        type: string
      title:
        type: string
    type: object
  controllers.CategoryInput:
    properties:
      name:
        type: string
    type: object
  controllers.ChangePasswordInput:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  controllers.CommentInput:
    properties:
      content:
        type: string
    type: object
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.TagInput:
    properties:
      name:
        type: string
    type: object
  controllers.UserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  models.Article:
    properties:
      author:
        $ref: '#/definitions/models.User'
      categories:
        items:
          $ref: '#/definitions/models.ArticleCategory'
        type: array
      content:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_published:
        type: boolean
      slug:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.ArticleTag'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.ArticleCategory:
    properties:
      article_id:
        type: integer
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.ArticleComment:
    properties:
      article_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_reply:
        type: boolean
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.ArticleTag:
    properties:
      article_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      tag:
        $ref: '#/definitions/models.Tag'
      tag_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.ReplyArticleComment:
    properties:
      article_id:
        type: integer
      comment_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      parent:
        $ref: '#/definitions/models.ArticleComment'
      parent_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Tag:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /articles:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
      summary: Get all articles.
      tags:
      - Article
    post:
      parameters:
      - description: 'body for create article (example ids input: ''1,2,3'')'
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ArticleInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Article'
      security:
      - ApiKeyAuth: []
      summary: Create Article.
      tags:
      - Article
  /articles/{id}:
    delete:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete article.
      tags:
      - Article
    get:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
      summary: Get article by id.
      tags:
      - Article
    put:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      - description: 'body for update article (example ids input: ''1,2,3'')'
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ArticleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
      security:
      - ApiKeyAuth: []
      summary: Update Article.
      tags:
      - Article
  /articles/{id}/comments:
    get:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ArticleComment'
            type: array
      summary: Get Comments by Article ID.
      tags:
      - Article
    post:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      - description: body for create user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.CommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticleComment'
      security:
      - ApiKeyAuth: []
      summary: Create Comment.
      tags:
      - Article
  /articles/category/{id}:
    get:
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
      summary: Get article by category id.
      tags:
      - Article
  /articles/comments/{id}:
    delete:
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete Comment.
      tags:
      - Article
  /articles/comments/{id}/replies:
    get:
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReplyArticleComment'
            type: array
      summary: Get Reply Comments by Comment ID.
      tags:
      - Article
    post:
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: string
      - description: body for create reply comment
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.CommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReplyArticleComment'
      security:
      - ApiKeyAuth: []
      summary: Create Reply Comment.
      tags:
      - Article
  /articles/comments/replies/{id}:
    delete:
      parameters:
      - description: reply comment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete Reply Comment.
      tags:
      - Article
  /articles/publish/{id}:
    patch:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Publish Article.
      tags:
      - Article
  /articles/slug/{slug}:
    get:
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
      summary: Get article by slug.
      tags:
      - Article
  /articles/tag/{tag}:
    get:
      parameters:
      - description: tag name
        in: path
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
      summary: Get article by tag name.
      tags:
      - Article
  /articles/unpublish/{id}:
    patch:
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Unpublish Article.
      tags:
      - Article
  /categories:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: Get all categories.
      tags:
      - Category
    post:
      parameters:
      - description: body for create category
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      security:
      - ApiKeyAuth: []
      summary: Create Category.
      tags:
      - Category
  /categories/{id}:
    delete:
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete Category.
      tags:
      - Category
    get:
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      summary: Get Category.
      tags:
      - Category
    put:
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      - description: body for update category
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      security:
      - ApiKeyAuth: []
      summary: Update Category.
      tags:
      - Category
  /change-password:
    patch:
      parameters:
      - description: body for change user password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Change Password user.
      tags:
      - Auth
  /login:
    post:
      description: Login User.
      parameters:
      - description: the body to login
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses: {}
      summary: Login user.
      tags:
      - Auth
  /my-profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Get user profile.
      tags:
      - Auth
  /register:
    post:
      parameters:
      - description: body for register user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Register user.
      tags:
      - Auth
  /tags:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
      summary: Get all tags.
      tags:
      - Tag
    post:
      parameters:
      - description: body for create tag
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.TagInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      security:
      - ApiKeyAuth: []
      summary: Create Tag.
      tags:
      - Tag
  /tags/{id}:
    delete:
      parameters:
      - description: tag id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete Tag.
      tags:
      - Tag
    get:
      parameters:
      - description: tag id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Get Tag.
      tags:
      - Tag
    put:
      parameters:
      - description: tag id
        in: path
        name: id
        required: true
        type: string
      - description: body for update tag
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.TagInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      security:
      - ApiKeyAuth: []
      summary: Update Tag.
      tags:
      - Tag
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users.
      tags:
      - User
    post:
      parameters:
      - description: body for create user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Create user.
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete user.
      tags:
      - User
    get:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Get user.
      tags:
      - User
    put:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: body for update user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Update user.
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
